{
  "name": "Review Agent",
  "nodes": [
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "input",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -144,
        -752
      ],
      "id": "eedfc209-ac91-43f1-9e4e-b291f5eee8cc",
      "name": "Merge"
    },
    {
      "parameters": {
        "operation": "Run actor and get dataset",
        "actorId": {
          "__rl": true,
          "value": "R8WeJwLuzLZ6g4Bkk",
          "mode": "list",
          "cachedResultName": "Amazon Reviews Scraper (junglee/amazon-reviews-scraper)",
          "cachedResultUrl": "https://console.apify.com/actors/R8WeJwLuzLZ6g4Bkk/input"
        },
        "customBody": "={\n    \"deduplicateRedirectedAsins\": true,\n    \"filterByRatings\": [\n        \"allStars\"\n    ],\n    \"includeGdprSensitive\": false,\n    \"maxReviews\": 50,\n    \"productUrls\": [\n        {\n            \"url\": \"{{ $json.messages[0].text.body.trim() }}\"\n        }\n    ],\n    \"reviewsAlwaysSaveCategoryData\": false,\n    \"reviewsUseProductVariantFilter\": false,\n    \"scrapeProductDetails\": false\n}"
      },
      "type": "@apify/n8n-nodes-apify.apify",
      "typeVersion": 1,
      "position": [
        -368,
        -944
      ],
      "id": "87b8fde8-3355-4c37-b636-46193c12498c",
      "name": "Review Scraper",
      "credentials": {
        "apifyApi": {
          "id": "OqILxhg8XllJb3vL",
          "name": "Apify account 2"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "={{ $json.messages[0].text.body }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,/;q=0.8"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Referer",
              "value": "https://www.google.com/"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true,
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -592,
        -704
      ],
      "id": "294a4ddd-146b-4a3a-924e-a816212cd8d8",
      "name": "Product Page Scraper"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  const payload = item.json;\n\n  // Extract HTML safely\n  const html =\n    typeof payload === \"string\"\n      ? payload\n      : payload?.body ?? payload?.data ?? payload?.html ?? \"\";\n\n  if (typeof html !== \"string\" || !html) {\n    return {\n      json: {\n        title: null,\n        error: \"No HTML string found from previous node\",\n        debugKeys: Object.keys(payload || {})\n      }\n    };\n  }\n\n  // ---------------------------\n  // TITLE EXTRACTION\n  // ---------------------------\n  const span = html.match(/<span id=\"productTitle\"[^>]*>([\\s\\S]*?)<\\/span>/i);\n  let title = span ? span[1].replace(/\\s+/g, \" \").trim() : null;\n\n  if (!title) {\n    const t = html.match(/<title>([\\s\\S]*?)<\\/title>/i);\n    if (t) {\n      title = t[1]\n        .replace(/Amazon\\.\\w+:\\s*/i, \"\")\n        .replace(/\\s+\\|.*$/, \"\")\n        .trim();\n    }\n  }\n\n  if (!title && payload?.request?.url) {\n    const beforeDp = payload.request.url.split(\"/dp/\")[0];\n    const slug = beforeDp.split(\"/\").filter(Boolean).pop();\n    if (slug) title = slug.replace(/-/g, \" \").trim();\n  }\n\n  // ---------------------------\n  // DESCRIPTION EXTRACTION\n  // ---------------------------\n  let description = null;\n  // Try several known Amazon selectors\n  const descMatch =\n    html.match(/<div id=\"productDescription\"[^>]*>([\\s\\S]*?)<\\/div>/i) ||\n    html.match(/<div id=\"feature-bullets\"[^>]*>([\\s\\S]*?)<\\/div>/i) ||\n    html.match(/<div id=\"bookDescription_feature_div\"[^>]*>([\\s\\S]*?)<\\/div>/i);\n\n  if (descMatch) {\n    // Strip HTML tags and clean text\n    description = descMatch[1]\n      .replace(/<[^>]+>/g, \" \")\n      .replace(/\\s+/g, \" \")\n      .trim();\n  }\n\n  // ---------------------------\n  // SPECIFICATIONS EXTRACTION\n  // ---------------------------\n  let specs = [];\n  // Capture specification tables or bullet lists\n  const specTable = html.match(\n    /<table[^>]*id=\"productDetails_techSpec_section_1\"[^>]*>([\\s\\S]*?)<\\/table>/i\n  );\n  const detailBullets = html.match(\n    /<div id=\"detailBullets_feature_div\"[^>]*>([\\s\\S]*?)<\\/div>/i\n  );\n\n  let rawSpec = \"\";\n  if (specTable) rawSpec = specTable[1];\n  else if (detailBullets) rawSpec = detailBullets[1];\n\n  if (rawSpec) {\n    // Extract key-value pairs from table rows or bullet points\n    const rows = [...rawSpec.matchAll(/<tr[^>]*>([\\s\\S]*?)<\\/tr>/gi)];\n    if (rows.length) {\n      specs = rows.map(r => {\n        const cells = [...r[1].matchAll(/<td[^>]*>([\\s\\S]*?)<\\/td>/gi)];\n        if (cells.length >= 2) {\n          const key = cells[0][1].replace(/<[^>]+>/g, \"\").trim();\n          const val = cells[1][1].replace(/<[^>]+>/g, \"\").trim();\n          return `${key}: ${val}`;\n        }\n        return r[1].replace(/<[^>]+>/g, \"\").trim();\n      });\n    } else {\n      const bullets = [...rawSpec.matchAll(/<li[^>]*>([\\s\\S]*?)<\\/li>/gi)];\n      specs = bullets.map(b => b[1].replace(/<[^>]+>/g, \"\").trim());\n    }\n  }\n\n  return {\n    json: {\n      title,\n      description,\n      specifications: specs,\n      input: $('WhatsApp Trigger').first().json.messages[0].text.body\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -368,
        -704
      ],
      "id": "a0e5a501-2cc9-4942-ab0c-27bba2e6175a",
      "name": "Characteristics Fetcher"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "481ed1e0-af34-4a7b-adfa-3047267deef7",
              "name": "=reviewDescription",
              "value": "={{$json.reviewDescription && $json.reviewDescription.trim()}}",
              "type": "string"
            },
            {
              "id": "74c2ada4-4e44-42b8-8e34-736f7125e391",
              "name": "stars",
              "value": "={{ $json.ratingScore }}",
              "type": "string"
            },
            {
              "id": "77acbd95-5df8-41bb-bfcf-5ae1d08fce88",
              "name": "title",
              "value": "={{ $json.title }}",
              "type": "string"
            },
            {
              "id": "906d382c-6767-46bd-9351-dfa9f260590b",
              "name": "URL",
              "value": "={{ $('Characteristics Fetcher').item.json.input }}",
              "type": "string"
            },
            {
              "id": "3a101123-e141-409e-b7eb-057e056cc077",
              "name": "Product Descreiption",
              "value": "={{ $json.description }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        80,
        -752
      ],
      "id": "87c48966-bd24-4fa0-bced-cf76736c3325",
      "name": "Sets info"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst product =\n  items.find(i => i.json.product)?.json.product ||\n  \"Unknown Product\";\n\n// keep only non-empty descriptions\nconst reviews = items\n  .map(i => (i.json.reviewDescription || \"\").trim())\n  .filter(Boolean);\n\n// compute basic stats (optional but useful)\nconst starVals = items.map(i => Number(i.json.stars || 0)).filter(n => !isNaN(n));\nconst avgStars = starVals.length ? (starVals.reduce((a,b)=>a+b,0) / starVals.length) : null;\n\nreturn [{\n  json: {\n    product: $input.first().json.title,\n    totalReviews: reviews.length,\n    avgStars,\n    url: $('Characteristics Fetcher').first().json.input,\n    ProductDescription: $input.first().json['Product Descreiption'],\n    // join with a clear separator so the model can see review boundaries\n    combinedReviews: reviews.join(\"\\n\\n---\\n\\n\")\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        304,
        -752
      ],
      "id": "82348e9a-79cb-48a6-a261-9eb0005fdf4e",
      "name": "Combines Reviews"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.combinedReviews }}",
        "options": {
          "systemMessage": "=You are writing a neutral, helpful product summary strictly from customer reviews I provide.\n\nFirst you need to enter the data available into the Google sheets using the attached google sheets tool. append whatever data you have which suites the sheet headers. (IMPORTANT: Dont paste all the reviews as received, summarise the kay aspects of all of them and insert in google sheet column).\n\nProduct: {{ $json.product }}\nTotal reviews: {{ $json.totalReviews }}\nAverage star rating (from data): {{ $json.avgStars }}\n\nREVIEWS (verbatim, separated by ---):\n{{ $json.combinedReviews }}\n\nWrite a customer-facing buying guide in **markdown** with this exact structure:\n\n# {{ $json.product }} â€” Should you buy it?\n\n**One-paragraph overview (120â€“180 words):** Concise, plain English. What itâ€™s like to use, overall quality, and value-for-money. Base claims only on the reviews above; do not invent specs.\n\n**Who itâ€™s best for:** 3â€“5 short bullets (user types / scenarios).\n\n**Pros (from reviews):**\n- 5 bullets, each â‰¤ 12 words, only if supported by multiple reviews.\n\n**Cons (from reviews):**\n- 3â€“5 bullets, realistic drawbacks.\n\n**Worth noting:** 2â€“4 bullets for quirks (e.g., software updates, accessories, after-sales).\n\n**Verdict:** One sentence summary (keep it grounded to reviews).\n\nRules:\n- Use ONLY information present in the reviews.\n- If reviews conflict, prefer the majority trend and note disagreements.\n- No hallucinated specs. No brand marketing language.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        640,
        -752
      ],
      "id": "63a8e117-961a-45ff-bd2e-3838934124c7",
      "name": "Reviewer"
    },
    {
      "parameters": {
        "updates": [
          "messages"
        ],
        "options": {}
      },
      "type": "n8n-nodes-base.whatsAppTrigger",
      "typeVersion": 1,
      "position": [
        -816,
        -848
      ],
      "id": "6caf6b7f-ba8e-4c44-8ec9-1ec82be029e4",
      "name": "WhatsApp Trigger",
      "webhookId": "02d24da5-1c50-43a5-a11f-cec708ac3e4c",
      "credentials": {
        "whatsAppTriggerApi": {
          "id": "0y3QHaQzLWonb9Xh",
          "name": "WhatsApp OAuth account"
        }
      }
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "774535632418483",
        "recipientPhoneNumber": "+917780645727",
        "textBody": "={{ $json.output }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1.1,
      "position": [
        1024,
        -752
      ],
      "id": "f7f8a1e8-d90f-40b9-9d68-bb8378b5337a",
      "name": "Send message",
      "webhookId": "92269b05-325b-405c-81ae-14649ca9b995",
      "credentials": {
        "whatsAppApi": {
          "id": "DMzX8XWCFLasvAN3",
          "name": "WhatsApp account"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "https://docs.google.com/spreadsheets/d/1jY-8MkxAzytOF_My-Cfg8DwDH4yrNGY_mcQbQFAdR6k/edit?gid=0#gid=0",
          "mode": "url"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1jY-8MkxAzytOF_My-Cfg8DwDH4yrNGY_mcQbQFAdR6k/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Product Title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Product_Title', ``, 'string') }}",
            "Product Url": "={{ $json.url }}",
            "Product Description": "={{ $json.ProductDescription }}",
            "Avg Rating": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Avg_Rating', ``, 'string') }}",
            "Review Description": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Review_Description', ``, 'string') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Product Title",
              "displayName": "Product Title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Product Url",
              "displayName": "Product Url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Product Description",
              "displayName": "Product Description",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Avg Rating",
              "displayName": "Avg Rating",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Review Description",
              "displayName": "Review Description",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheetsTool",
      "typeVersion": 4.7,
      "position": [
        816,
        -528
      ],
      "id": "f68fe44e-f175-4709-a06f-82ac2a3b2236",
      "name": "Append row in sheet in Google Sheets",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qZxSUgvplwZzMaSI",
          "name": "Review Agent Project"
        }
      }
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "774535632418483",
        "recipientPhoneNumber": "+917780645727",
        "textBody": "Error running node 'Review Scraper'",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1.1,
      "position": [
        -144,
        -992
      ],
      "id": "fac2a827-6578-4bca-9264-d34193740cae",
      "name": "Error Message",
      "webhookId": "dd5d7742-fb24-4f0e-9797-04bd6afeb31a",
      "credentials": {
        "whatsAppApi": {
          "id": "DMzX8XWCFLasvAN3",
          "name": "WhatsApp account"
        }
      }
    },
    {
      "parameters": {
        "model": "model-router",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAzureOpenAi",
      "typeVersion": 1,
      "position": [
        544,
        -320
      ],
      "id": "057eaf72-b676-4d65-a57a-914546c646b6",
      "name": "Azure OpenAI Chat Model",
      "credentials": {
        "azureOpenAiApi": {
          "id": "bgN7pH9aqxp7f1cM",
          "name": "Azure Open AI account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "rule": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "b5c25c0b-3f8c-49ef-bfd0-82ede92ffd64",
                    "leftValue": "1",
                    "rightValue": "1",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.modelSelector",
      "typeVersion": 1,
      "position": [
        528,
        -528
      ],
      "id": "091b0728-6504-426e-a2a4-83b75963435e",
      "name": "Model Selector"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        672,
        -320
      ],
      "id": "81d66904-2d35-499a-b4ba-116b367b533f",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "p7dZktr8muVIY9BS",
          "name": "Review Key"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "input",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        304,
        -80
      ],
      "id": "2650c1d5-0e97-4bdf-a76d-af8a13f6aa69",
      "name": "Merge1"
    },
    {
      "parameters": {
        "operation": "Run actor and get dataset",
        "actorId": {
          "__rl": true,
          "value": "R8WeJwLuzLZ6g4Bkk",
          "mode": "list",
          "cachedResultName": "Amazon Reviews Scraper (junglee/amazon-reviews-scraper)",
          "cachedResultUrl": "https://console.apify.com/actors/R8WeJwLuzLZ6g4Bkk/input"
        },
        "customBody": "={\n    \"deduplicateRedirectedAsins\": true,\n    \"filterByRatings\": [\n        \"allStars\"\n    ],\n    \"includeGdprSensitive\": false,\n    \"maxReviews\": 50,\n    \"productUrls\": [\n        {\n            \"url\": \"{{ $json['Product Url'].trim() }}\"\n        }\n    ],\n    \"reviewsAlwaysSaveCategoryData\": false,\n    \"reviewsUseProductVariantFilter\": false,\n    \"scrapeProductDetails\": false\n}"
      },
      "type": "@apify/n8n-nodes-apify.apify",
      "typeVersion": 1,
      "position": [
        80,
        -272
      ],
      "id": "09627e74-9943-4c44-b033-a9fe2692db77",
      "name": "Review Scraper1",
      "credentials": {
        "apifyApi": {
          "id": "OqILxhg8XllJb3vL",
          "name": "Apify account 2"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "={{ $json['Product Url'].trim() }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,/;q=0.8"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Referer",
              "value": "https://www.google.com/"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true,
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -144,
        -28
      ],
      "id": "513ed0aa-56ec-4f24-9a3e-c690eef89acb",
      "name": "Product Page Scraper1"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  const payload = item.json;\n\n  // Extract HTML safely\n  const html =\n    typeof payload === \"string\"\n      ? payload\n      : payload?.body ?? payload?.data ?? payload?.html ?? \"\";\n\n  if (typeof html !== \"string\" || !html) {\n    return {\n      json: {\n        title: null,\n        error: \"No HTML string found from previous node\",\n        debugKeys: Object.keys(payload || {})\n      }\n    };\n  }\n\n  // ---------------------------\n  // TITLE EXTRACTION\n  // ---------------------------\n  const span = html.match(/<span id=\"productTitle\"[^>]*>([\\s\\S]*?)<\\/span>/i);\n  let title = span ? span[1].replace(/\\s+/g, \" \").trim() : null;\n\n  if (!title) {\n    const t = html.match(/<title>([\\s\\S]*?)<\\/title>/i);\n    if (t) {\n      title = t[1]\n        .replace(/Amazon\\.\\w+:\\s*/i, \"\")\n        .replace(/\\s+\\|.*$/, \"\")\n        .trim();\n    }\n  }\n\n  if (!title && payload?.request?.url) {\n    const beforeDp = payload.request.url.split(\"/dp/\")[0];\n    const slug = beforeDp.split(\"/\").filter(Boolean).pop();\n    if (slug) title = slug.replace(/-/g, \" \").trim();\n  }\n\n  // ---------------------------\n  // DESCRIPTION EXTRACTION\n  // ---------------------------\n  let description = null;\n  // Try several known Amazon selectors\n  const descMatch =\n    html.match(/<div id=\"productDescription\"[^>]*>([\\s\\S]*?)<\\/div>/i) ||\n    html.match(/<div id=\"feature-bullets\"[^>]*>([\\s\\S]*?)<\\/div>/i) ||\n    html.match(/<div id=\"bookDescription_feature_div\"[^>]*>([\\s\\S]*?)<\\/div>/i);\n\n  if (descMatch) {\n    // Strip HTML tags and clean text\n    description = descMatch[1]\n      .replace(/<[^>]+>/g, \" \")\n      .replace(/\\s+/g, \" \")\n      .trim();\n  }\n\n  // ---------------------------\n  // SPECIFICATIONS EXTRACTION\n  // ---------------------------\n  let specs = [];\n  // Capture specification tables or bullet lists\n  const specTable = html.match(\n    /<table[^>]*id=\"productDetails_techSpec_section_1\"[^>]*>([\\s\\S]*?)<\\/table>/i\n  );\n  const detailBullets = html.match(\n    /<div id=\"detailBullets_feature_div\"[^>]*>([\\s\\S]*?)<\\/div>/i\n  );\n\n  let rawSpec = \"\";\n  if (specTable) rawSpec = specTable[1];\n  else if (detailBullets) rawSpec = detailBullets[1];\n\n  if (rawSpec) {\n    // Extract key-value pairs from table rows or bullet points\n    const rows = [...rawSpec.matchAll(/<tr[^>]*>([\\s\\S]*?)<\\/tr>/gi)];\n    if (rows.length) {\n      specs = rows.map(r => {\n        const cells = [...r[1].matchAll(/<td[^>]*>([\\s\\S]*?)<\\/td>/gi)];\n        if (cells.length >= 2) {\n          const key = cells[0][1].replace(/<[^>]+>/g, \"\").trim();\n          const val = cells[1][1].replace(/<[^>]+>/g, \"\").trim();\n          return `${key}: ${val}`;\n        }\n        return r[1].replace(/<[^>]+>/g, \"\").trim();\n      });\n    } else {\n      const bullets = [...rawSpec.matchAll(/<li[^>]*>([\\s\\S]*?)<\\/li>/gi)];\n      specs = bullets.map(b => b[1].replace(/<[^>]+>/g, \"\").trim());\n    }\n  }\n\n  return {\n    json: {\n      title,\n      description,\n      specifications: specs,\n      input: $('Get row(s) in sheet').first().json['Product Url']\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        80,
        -28
      ],
      "id": "1121ac6f-9c2b-48fa-9c20-b0c0305f4acb",
      "name": "Characteristics Fetcher1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "481ed1e0-af34-4a7b-adfa-3047267deef7",
              "name": "=reviewDescription",
              "value": "={{$json.reviewDescription && $json.reviewDescription.trim()}}",
              "type": "string"
            },
            {
              "id": "74c2ada4-4e44-42b8-8e34-736f7125e391",
              "name": "stars",
              "value": "={{ $json.ratingScore }}",
              "type": "string"
            },
            {
              "id": "77acbd95-5df8-41bb-bfcf-5ae1d08fce88",
              "name": "title",
              "value": "={{ $json.title }}",
              "type": "string"
            },
            {
              "id": "906d382c-6767-46bd-9351-dfa9f260590b",
              "name": "URL",
              "value": "={{ $('Characteristics Fetcher1').item.json.input }}",
              "type": "string"
            },
            {
              "id": "3a101123-e141-409e-b7eb-057e056cc077",
              "name": "Product Descreiption",
              "value": "={{ $json.description }}",
              "type": "string"
            },
            {
              "id": "519eb0b0-a7cc-49ec-94fe-293dc9adbc97",
              "name": "specs",
              "value": "={{ $json.specifications }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        752,
        -80
      ],
      "id": "e2ed5bbb-a39c-42b0-b104-797c9050ce1a",
      "name": "Sets info1"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst product =\n  items.find(i => i.json.product)?.json.product ||\n  \"Unknown Product\";\n\n// keep only non-empty descriptions\nconst reviews = items\n  .map(i => (i.json.reviewDescription || \"\").trim())\n  .filter(Boolean);\n\n// compute basic stats (optional but useful)\nconst starVals = items.map(i => Number(i.json.stars || 0)).filter(n => !isNaN(n));\nconst avgStars = starVals.length ? (starVals.reduce((a,b)=>a+b,0) / starVals.length) : null;\n\nreturn [{\n  json: {\n    product: $input.first().json.title,\n    totalReviews: reviews.length,\n    avgStars,\n    url: $('Characteristics Fetcher1').first().json.input,\n    ProductDescription: $input.first().json['Product Descreiption'],\n    // join with a clear separator so the model can see review boundaries\n    combinedReviews: reviews.join(\"\\n\\n---\\n\\n\"),\n    specs: $input.first().json.specs\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        976,
        -80
      ],
      "id": "9ed903c9-e8fc-4143-9599-7625539dc3bf",
      "name": "Combines Reviews1"
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "774535632418483",
        "recipientPhoneNumber": "+917780645727",
        "textBody": "Error running node 'Review Scraper'",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1.1,
      "position": [
        304,
        -320
      ],
      "id": "e1230255-9abd-4a22-80ec-acaff3f1f6bb",
      "name": "Error Message1",
      "webhookId": "dd5d7742-fb24-4f0e-9797-04bd6afeb31a",
      "credentials": {
        "whatsAppApi": {
          "id": "DMzX8XWCFLasvAN3",
          "name": "WhatsApp account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Product:\n{{ $json.product }}\n\nProduct Description:\n{{ $json.ProductDescription }}\n\nCombined Reviews:\n{{ $json.combinedReviews }}\n\nSpecifications of the Product:\n{{ $json.specs }}",
        "options": {
          "systemMessage": "=You are writing a neutral, helpful product summary strictly from customer reviews I provide.\n\nFirst you need to enter the data available into the Google sheets using the attached google sheets tool. append whatever data you have which suites the sheet headers. (IMPORTANT: Dont paste all the reviews as received, summarise the kay aspects of all of them and insert in google sheet column).\n\nProduct: {{ $json.product }}\nTotal reviews: {{ $json.totalReviews }}\nAverage star rating (from data): {{ $json.avgStars }}\n\nREVIEWS (verbatim, separated by ---):\n{{ $json.combinedReviews }}\n\nWrite a customer-facing buying guide in **markdown** with this exact structure:\n\n# {{ $json.product }} â€” Should you buy it?\n\n**One-paragraph overview (120â€“180 words):** Concise, plain English. What itâ€™s like to use, overall quality, and value-for-money. Base claims only on the reviews above; do not invent specs.\n\n**Who itâ€™s best for:** 3â€“5 short bullets (user types / scenarios).\n\n**Pros (from reviews):**\n- 5 bullets, each â‰¤ 12 words, only if supported by multiple reviews.\n\n**Cons (from reviews):**\n- 3â€“5 bullets, realistic drawbacks.\n\n**Worth noting:** 2â€“4 bullets for quirks (e.g., software updates, accessories, after-sales).\n\n**Verdict:** One sentence summary (keep it grounded to reviews).\n\nRules:\n- Use ONLY information present in the reviews.\n- If reviews conflict, prefer the majority trend and note disagreements.\n- No hallucinated specs. No brand marketing language.\n\nAfter the Completion of the review paste your response in the output column of google sheet using it's tool.(Important) (Do this for every Item)\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1200,
        -80
      ],
      "id": "02bc9f62-08bd-4ccb-87aa-8ae0c54f0ab1",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": "o4-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAzureOpenAi",
      "typeVersion": 1,
      "position": [
        848,
        112
      ],
      "id": "0212ad03-e6a0-47f9-89cd-e9140770a9b9",
      "name": "Azure OpenAI Chat Model1",
      "credentials": {
        "azureOpenAiApi": {
          "id": "bgN7pH9aqxp7f1cM",
          "name": "Azure Open AI account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "https://docs.google.com/spreadsheets/d/1jY-8MkxAzytOF_My-Cfg8DwDH4yrNGY_mcQbQFAdR6k/edit?gid=1238187015#gid=1238187015",
          "mode": "url"
        },
        "sheetName": {
          "__rl": true,
          "value": 1238187015,
          "mode": "list",
          "cachedResultName": "Review Request Sheet",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1jY-8MkxAzytOF_My-Cfg8DwDH4yrNGY_mcQbQFAdR6k/edit#gid=1238187015"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Product Url": "={{ $json.url }}",
            "Product Title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Product_Title', ``, 'string') }}",
            "Review Description": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Review_Description', ``, 'string') }}",
            "Output": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Output', ``, 'string') }}"
          },
          "matchingColumns": [
            "Product Url"
          ],
          "schema": [
            {
              "id": "Product Url",
              "displayName": "Product Url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Product Title",
              "displayName": "Product Title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Review Description",
              "displayName": "Review Description",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Output",
              "displayName": "Output",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "locationDefine": {
            "values": {
              "firstDataRow": "=2"
            }
          }
        }
      },
      "type": "n8n-nodes-base.googleSheetsTool",
      "typeVersion": 4.7,
      "position": [
        1056,
        128
      ],
      "id": "902ef16d-5633-4b05-9303-fabb64f441a6",
      "name": "Update row in sheet in Google Sheets",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qZxSUgvplwZzMaSI",
          "name": "Review Agent Project"
        }
      }
    },
    {
      "parameters": {
        "fieldToSplitOut": "reviewDescription",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        528,
        -80
      ],
      "id": "42465651-b393-4dca-ba5e-b612e531373a",
      "name": "Split Out"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1552,
        44
      ],
      "id": "aa2839bd-408c-4205-b98d-f0d5d8819299",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "https://docs.google.com/spreadsheets/d/1jY-8MkxAzytOF_My-Cfg8DwDH4yrNGY_mcQbQFAdR6k/edit?gid=1238187015#gid=1238187015",
          "mode": "url"
        },
        "sheetName": {
          "__rl": true,
          "value": 965814550,
          "mode": "list",
          "cachedResultName": "Review Request Sheet 2",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1jY-8MkxAzytOF_My-Cfg8DwDH4yrNGY_mcQbQFAdR6k/edit#gid=965814550"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "Output",
              "lookupValue": "="
            }
          ]
        },
        "options": {
          "returnFirstMatch": true
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -368,
        -28
      ],
      "id": "93af5722-322c-41ce-a285-36393379a12d",
      "name": "Get row(s) in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qZxSUgvplwZzMaSI",
          "name": "Review Agent Project"
        }
      }
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "documentId": {
          "__rl": true,
          "value": "1jY-8MkxAzytOF_My-Cfg8DwDH4yrNGY_mcQbQFAdR6k",
          "mode": "list",
          "cachedResultName": "Review Agent n8n",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1jY-8MkxAzytOF_My-Cfg8DwDH4yrNGY_mcQbQFAdR6k/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1238187015,
          "mode": "list",
          "cachedResultName": "Review Request Sheet",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1jY-8MkxAzytOF_My-Cfg8DwDH4yrNGY_mcQbQFAdR6k/edit#gid=1238187015"
        },
        "includeInOutput": "old",
        "options": {
          "columnsToWatch": [
            "Product Url"
          ]
        }
      },
      "type": "n8n-nodes-base.googleSheetsTrigger",
      "typeVersion": 1,
      "position": [
        -816,
        -28
      ],
      "id": "d31ecc3f-5018-4520-adbf-eff4aeeab11a",
      "name": "Google Sheets Trigger",
      "credentials": {
        "googleSheetsTriggerOAuth2Api": {
          "id": "1MhNI8TRKcSq7U2j",
          "name": "Google Sheets Trigger account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "01863c1a-5a9f-4099-b384-3065f93722b4",
              "leftValue": "={{ $json['Product Title'] }}",
              "rightValue": "=",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -592,
        -28
      ],
      "id": "cb469dd0-35eb-4beb-9ba4-108219fc9f1a",
      "name": "Filter"
    }
  ],
  "pinData": {},
  "connections": {
    "Merge": {
      "main": [
        [
          {
            "node": "Sets info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Review Scraper": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Product Page Scraper": {
      "main": [
        [
          {
            "node": "Characteristics Fetcher",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Characteristics Fetcher": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Sets info": {
      "main": [
        [
          {
            "node": "Combines Reviews",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combines Reviews": {
      "main": [
        [
          {
            "node": "Reviewer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WhatsApp Trigger": {
      "main": [
        [
          {
            "node": "Review Scraper",
            "type": "main",
            "index": 0
          },
          {
            "node": "Product Page Scraper",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reviewer": {
      "main": [
        [
          {
            "node": "Send message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append row in sheet in Google Sheets": {
      "ai_tool": [
        [
          {
            "node": "Reviewer",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Azure OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Model Selector",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Model Selector": {
      "ai_languageModel": [
        [
          {
            "node": "Reviewer",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Model Selector",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Review Scraper1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Product Page Scraper1": {
      "main": [
        [
          {
            "node": "Characteristics Fetcher1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Characteristics Fetcher1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Sets info1": {
      "main": [
        [
          {
            "node": "Combines Reviews1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combines Reviews1": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Azure OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update row in sheet in Google Sheets": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Sets info1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Get row(s) in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s) in sheet": {
      "main": [
        [
          {
            "node": "Product Page Scraper1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Review Scraper1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets Trigger": {
      "main": [
        [
          {
            "node": "Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter": {
      "main": [
        [
          {
            "node": "Get row(s) in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "availableInMCP": false,
    "timezone": "Asia/Kolkata",
    "errorWorkflow": "fJAYZ8BKJvckPl29",
    "timeSavedPerExecution": 55
  },
  "versionId": "340f63e9-c113-4396-8e7b-46e5fb0a7121",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "920ebc62b0f57b436402530be529d8af597d0d37d23eb4f3fa86ed6ac9a6982c"
  },
  "id": "fJAYZ8BKJvckPl29",
  "tags": []
}